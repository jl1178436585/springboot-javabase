java元注解：负责对注解进行注解

1.@Target:描述注解的使用范围。比如类，方法，成员变量
	取值范围：
		1.1 ANNOTATION_TYPE ：可以给一个注解进行注解
		1.2 constructor：可以给构造方法进行注解
		1.3 field:可以给属性进行注解
		1.4 local_variable:可以给局部变量进行注解
		1.5 method: 可以给方法进行注解
		1.6 package: 可以给一个包进行注解
		1.7 parameter: 可以给一个方法内的参数进行注解
		1.8 type: 可以给一个类型进行注解，比如类、接口、枚举
	

2.@Retention: 表示在什么级别保存改注解信息，用于描述注解的声明周期
	取值范围：
		2.1 source:- RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。 
		2.2 class: 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中
		2.3 runtime： 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。

3.@Documented：可以被例如javadoc此类的工具文档化

4.@Inherited：是继承的意思，但是它并不是说注解本身可以继承,
	是一个标记注解，阐述了某个被标注的类型是被继承的，如果一个使用了@Inherited修饰的annotation类型被用于一个class,
	则这个annotation将被用于这个类的子类。看下面的代码：
	
		@Inherited
		@Retention(RetentionPolicy.RUNTIME)
		@interface Test {}
		
		@Test
		public class A {}
		
		public class B extends A {}
		注解 Test 被 @Inherited 修饰，之后类 A 被 Test 注解，类 B 继承 A,类 B 也拥有 Test 这个注解。

		可以这样理解：
		老子非常有钱，所以人们给他贴了一张标签叫做富豪。
		老子的儿子长大后，只要没有和老子断绝父子关系，虽然别人没有给他贴标签，但是他自然也是富豪。
		老子的孙子长大了，自然也是富豪。

5.@Repeatable：  Java 1.8 才加进来的，所以算是一个新的特性。

	Repeatable 是可重复的意思。什么样的注解会多次应用呢？通常是注解的值可以同时取多个。
	举个例子，一个人他既是程序员又是产品经理,同时他还是个画家。
	
	public @interface Persons {
    	Person[]  value();
	}
	
	@Repeatable(Persons.class)
	@interface Person{
	    String role default "";
	}
	
	
	@Person(role="artist")
	@Person(role="coder")
	@Person(role="PM")
	public class SuperMan{
	
	}
	
	注意上面的代码，@Repeatable 注解了 Person。而 @Repeatable 后面括号中的类相当于一个容器注解。
	什么是容器注解呢？就是用来存放其它注解的地方。它本身也是一个注解。
	我们再看看代码中的相关容器注解。
	@interface Persons {
    	Person[]  value();
	}	
	
	如果不好理解的话，可以这样理解。Persons 是一张总的标签，上面贴满了 Person 这种同类型但内容不一样的标签。
	把 Persons 给一个 SuperMan 贴上，相当于同时给他贴了程序员、产品经理、画家的标签。
	我们可能对于 @Person(role=”PM”) 括号里面的内容感兴趣，它其实就是给 Person 这个注解的 role 属性赋值为 PM ，大家不明白正常，马上就讲到注解的属性这一块。
	
	